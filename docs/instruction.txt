1. Настройка сборочного сервера.

1.1 Создаем VM-1, например, в YndexCloud (2 vCPU, 8GB RAM, 93 Gb HDD, public IPv4)

1.2 Добавляем открытый ssh-ключ в момент конфигурирования VM-1, 
    сгенерированный на локальной машине, с которой будем подключаться.
    Если на локальной машине ключей несколько, указываем нужный с помощью переключателя -i

1.3 Заходим на VM-1 
ssh vm_01_adm_cse@158.160.48.90

1.4 Устанавливаем обновления
sudo apt-get update
sudo apt-get upgrade

1.5 Java environment (можно поставить конкретную версию)
sudo apt-get install default-jre

1.6 Устанавливаем Jenkins 
https://www.jenkins.io/doc/book/installing/linux/#debianubuntu

1.6.1 Проверяем
sudo service jenkins status
1.6.2 Заходим через Web interface 
http://158.160.48.90:8080/
и устанавливаем необходимые плагины. Меняем настройки по умолчанию при необходимости.

1.7 Устанавливаем Docker
https://docs.docker.com/engine/install/ubuntu/#install-using-the-convenience-script
1.7.1 Добавляем нужных пользователей в группу docker
sudo usermod -aG docker vm_01_adm_cse
id vm_01_adm_cse #смотрим, что теперь этот пользователь входит в группу docker
sudo usermod -aG docker jenkins
(см. документацию https://www.digitalocean.com/community/questions/how-to-fix-docker-got-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket)
1.7.2 Перелогиниваемся, проверяем, что Docker service работает
docker image list
1.7.3 Рестартуем Jenkins
http://158.160.48.90:8080/restart

1.8 Клонируем репозитарий с утилитами для системы автоматической сборки
git clone https://github.com/adv-dev-22/cpp_cmake_ops.git
1.8.1 Переходим в поддиректорию 
cd cpp_cmake_ops/docker
и создаем докер-образ для сборки стандартным компилятором под x86_64
docker build -t ubuntu_x86_84:v12 -f Dockerfile_x86_64 .
1.8.2 Создаем докер-образ для кросс-компиляции на платформе x86_64 под платформу arm32v7
docker build -t ubuntu_arm32v7:v01 -f Dockerfile_arm32v7 .
1.8.3 docker image ls
Должно получиться что-то вроде
REPOSITORY       TAG       IMAGE ID       CREATED        SIZE
ubuntu_arm32v7   v01       cab6babef697   26 hours ago   544MB
ubuntu_x86_84    v12       cfcc7cea2713   6 days ago     470MB


2. Настройка Jenkins проекта вручную с нуля.

2.1 Создаем новый проект (freestyle project).
2.1.1 Удалять устаревшие сборки - да.
2.1.1.1 Сколько последних сборок хранить - 5.
2.1.2 Управление исходным кодом - Git
2.1.2.1 Repository URL - https://github.com/libsdl-org/libtiff.git
2.1.3 Delete workspace before build starts - да.

2.2 Добавляем параметры билда. Типы всех 3 параметров - строковые.
2.2.1 Отсюда будут запускаться bash-скрипты этапов сборки, тестирования и деплоя
Имя:SCRIPT_PATH
Значение:/usr/local/bin
2.2.2 Путь до папки с репозитарием со скриптами cpp_cmake_ops
Имя:REPO_UTILS_PATH
Значение:/home/vm_01_adm_cse/build_utils
2.2.3 Пользователь из под которого будем деплоить артефакты сборки на deploy-скрвер
Имя:DEPLOY_USER_VM2
Значение:vm_02_adm_cse

2.3 Добавляем шаг сборки. Выполнить команду shell. Вставляем текст
$SCRIPT_PATH/build_x86_64.sh
#echo "------------------ Build x86_64 Started ------------------"
#SRC_PATH=$WORKSPACE
#mkdir build-x86_64
#docker run --rm --name img_run_x86_64_12 -v $SRC_PATH:/app/src ubuntu_x86_84:v12 "cd /app/src/build-x86_64 && cmake .. && cmake --build ." 
#ls build-x86_64/libtiff
#echo "------------------ Build x86_64 Finished ------------------"

2.4 Добавляем шаг сборки. Выполнить команду shell. Вставляем текст
$SCRIPT_PATH/test_x86_64.sh
#echo "------------------ Test x86_64 Started ------------------"
#SRC_PATH=$WORKSPACE
#docker run --rm --name img_run_x86_64_12 -v $SRC_PATH:/app/src ubuntu_x86_84:v12 \
#    "cd /app/src/build-x86_64 && cmake --build . --target test > results_test_$BUILD_NUMBER.txt"
#less $SRC_PATH/build-x86_64/results_test_$BUILD_NUMBER.txt
#echo "------------------ Test x86_64 Finished ------------------"

2.5 Добавляем шаг сборки. Выполнить команду shell. Вставляем текст
$SCRIPT_PATH/build_arm32v7.sh
#echo "------------------ Build arm32v7 Started ------------------"
#SRC_PATH=$WORKSPACE
#mkdir build-arm32v7
#docker run --rm --name img_run_arm32v7_01 -v $SRC_PATH:/app/src \
#    -v $REPO_UTILS_PATH/cpp_cmake_ops/cmake-configs:/cmake-toolchain ubuntu_arm32v7:v01 \
#    "cd /app/src/build-arm32v7 && \
#     cmake -DCMAKE_TOOLCHAIN_FILE=/cmake-toolchain/toolchain_arm32v7.cmake .. && cmake --build ."
#ls build-arm32v7/libtiff
#echo "------------------ Build arm32v7 Finished ------------------"

2.6 Добавляем шаг сборки. Выполнить команду shell. Вставляем текст
$SCRIPT_PATH/deploy_all.sh
#echo "------------------ Deploy Started ------------------"
#SRC_PATH=$WORKSPACE
#scp -o StrictHostKeyChecking=no $SRC_PATH/build-x86_64/libtiff/libtiff.so \
#    $DEPLOY_USER_VM2@$IP_UBUNTU_DEPLOY:/home/$DEPLOY_USER_VM2/deploy/build-x86_64/libs_out/libtiff_$BUILD_NUMBER.so
#scp -o StrictHostKeyChecking=no $SRC_PATH/build-arm32v7/libtiff/libtiff.so \
#    $DEPLOY_USER_VM2@$IP_UBUNTU_DEPLOY:/home/$DEPLOY_USER_VM2/deploy/build-arm32v7/libs_out/libtiff_$BUILD_NUMBER.so
#echo "------------------ Deploy Finished ------------------"

2.7 На VM-1 нужно скопировать скрипты из репозитария в папку /usr/local/bin
sudo cp cpp_cmake_ops/scripts/*.sh /usr/local/bin


3. Настройка передачи данных на сервер/хранилище артефактов.

3.1 Создаем VM-2, например, в YndexCloud (2 vCPU, 5GB RAM, 50 Gb HDD, public IPv4)

3.2 Добавляем открытый ssh-ключ в момент конфигурирования VM-2, сгенерированный на локальной машине,
    с которой будем подключаться. Если на локальной машине ключей несколько, указываем 
    нужный с помощью переключателя -i.

3.3 Заходим на первую машину VM-1 (сборочную) и генерерируем связку ключей, которые будут нужны
    для подключения к deploy-серверу VM-2
ssh-keygen

3.4 На VM-2 добавляем открытый ключ с VM-1 в authorized_keys
echo sh-rsa A...Gp6c= vm_01_adm_cse@ubuntu-server-01 >> authorized_keys

3.5 Проверяем, что копирование на удаленный сервер работает
scp ./README.md  vm_02_adm_cse@158.160.100.247:/home/vm_02_adm_cse/
Здесь 158.160.100.247 IPv4 адрес VM-2

3.6 Устанавливаем plugin Publish over SSH. Рестартуем Jenkins

3.7 Идем в Dashboard -> Настроить Jenkins -> System. Нам нужен раздел Publish over SSH.
3.7.1 Добавляем в поле Key приватный ключ из пункта 3.3 лежащий по адресу /home/vm_01_adm_cse/.ssh/id_rsa
3.7.2 В разделе SSH Servers указываем следующие параметры
Name: yc-ubuntu-deploy-02 # Просто название, можно указать любое удобное
Hostname:158.160.100.247 - IP VM-2 на которую будем деплоить артефакты
Username: vm_02_adm_cse
Remote Directory: /home/vm_02_adm_cse/deploy  #Можно зайти на VM-2 сервер и создать нужную
3.7.3 Тестируем подключение, получаем success

3.8 В настройках проекта сборки в разделе Послесборочные операции выбираем
Send build artifacts over SSH 
3.8.1 Выбираем единственный сервер yc-ubuntu-deploy-02
3.8.2 Source files: build-x86_64/results_test_$BUILD_NUMBER.txt #будем отправлять результаты тестов
3.8.3 Remove prefix: build-x86_64/
3.8.4 Remote directory: build-x86_64/tests_out
3.8.5 На VM-2 в папке deploy создаем две папки
mkdir build-arm32v7  
mkdir build-x86_64
3.8.6 В папке build-x86_64 создаем две папки
mkdir libs_out
mkdir tests_out
3.8.7 В папке build-arm32v7 создаем папку
При успешном запуске сборки в конце видим примерно такой вывод:
SSH: Connecting from host [ubuntu-server-01]
SSH: Connecting with configuration [yc-ubuntu-deploy-02] ...
SSH: Disconnecting configuration [yc-ubuntu-deploy-02] ...
SSH: Transferred 1 file(s)
Finished: SUCCESS
Можно зайти на Deploy-сервер и проверить, что файл с выводом тестов скопирован.

3.9 На VM-1 Добавляем ssh ключи для пользователя jenkins (для того, чтобы можно было скопировать по scp
файл(ы) с билд-машины на  deploy-server)
sudo su jenkins -
3.9.1 Выполняем шаги 3.3 - 3.5 для пользователя jenkins

3.10 В триггерах сборки отмечаем 
Опрашивать SCM об изменениях
В расписании указываем шаблон
H H * * *


4. Глобальные настройки проекта.

4.1 Переменные среды
Имя:IP_UBUNTU_DEPLOY
Значение:158.160.100.247


5. Сохранение и восстановление проекта через Jenkins CLI.

5.1 Скачиваем jenkins-cli.jar на VM-1
wget http://158.160.105.42:8080/jnlpJars/jenkins-cli.jar
Проверяем, что работает
java -jar jenkins-cli.jar -s http://158.160.98.11:8080/ help

5.2 Создаем отдельного пользователя для работы в CLI
5.2.1 Проверяем аутентификацию
java -jar jenkins-cli.jar -auth cli_service_01:password -s http://158.160.105.42:8080/ who-am-i
5.2.2 Cоздаем для него токен (через web-интерфейс в Jenkins)
token-cli 11935ce3172c35e0067a5a52539b9c2217

5.3. Создаем две переменных окружения
5.3.1 export JENKINS_USER_ID=cli_service_01
5.3.2 export JENKINS_API_TOKEN=11935ce3172c35e0067a5a52539b9c2217
Проверяем
java -jar jenkins-cli.jar -s http://158.160.105.42:8080/ who-am-i

5.4 Этой командой можно пользоваться с удаленного компьютера, главное,
    скачать jenkins-cli.jar (можно через web interface)
    прописать две переменных окружения, п.5.3

5.5 Сохраняем проект
java -jar jenkins-cli.jar -s http://158.160.105.42:8080/ get-job ubuntu-build-cmake > ubuntu-build-cmake_backup.xml

5.6 Восстановить проект
java -jar jenkins-cli.jar -s http://158.160.105.42:8080/ create-job ubuntu-build-cmake-2 < ubuntu-build-cmake_backup.xml

